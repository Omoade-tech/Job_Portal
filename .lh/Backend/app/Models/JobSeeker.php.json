{
    "sourceFile": "Backend/app/Models/JobSeeker.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1736493359077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736495476828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,18 +28,9 @@\n         'state',\n         'country',\n     ];\n \n-    /**\n-     * Automatically hash the password before saving.\n-     *\n-     * @param string $value\n-     * @return void\n-     */\n-    public function setPasswordAttribute($value)\n-    {\n-        $this->attributes['password'] = bcrypt($value);\n-    }\n+   \n \n     /**\n      * Automatically hash the confirmPassword before saving.\n      *\n"
                },
                {
                    "date": 1736495483683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,50 +28,10 @@\n         'state',\n         'country',\n     ];\n \n-   \n-\n-    /**\n-     * Automatically hash the confirmPassword before saving.\n-     *\n-     * @param string $value\n-     * @return void\n+  \n      */\n-    public function setConfirmPasswordAttribute($value)\n-    {\n-        $this->attributes['confirmPassword'] = bcrypt($value);\n-    }\n-\n-    /**\n-     * Get the full address of the job seeker.\n-     *\n-     * @return string\n-     */\n-    public function getFullAddressAttribute()\n-    {\n-        return \"{$this->address}, {$this->city}, {$this->state}, {$this->country}\";\n-    }\n-\n-    /**\n-     * Scope to filter job seekers by email.\n-     *\n-     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n-     * @param string $email\n-     * @return \\Illuminate\\Database\\Eloquent\\Builder\n-     */\n-    public function scopeByEmail($query, $email)\n-    {\n-        return $query->where('email', $email);\n-    }\n-\n-    /**\n-     * Scope to filter job seekers by status.\n-     *\n-     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n-     * @param string $status\n-     * @return \\Illuminate\\Database\\Eloquent\\Builder\n-     */\n     public function scopeByStatus($query, $status)\n     {\n         return $query->where('status', $status);\n     }\n"
                },
                {
                    "date": 1736495491348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,47 +28,6 @@\n         'state',\n         'country',\n     ];\n \n-  \n-     */\n-    public function scopeByStatus($query, $status)\n-    {\n-        return $query->where('status', $status);\n-    }\n-\n-    /**\n-     * Scope to filter job seekers by city.\n-     *\n-     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n-     * @param string $city\n-     * @return \\Illuminate\\Database\\Eloquent\\Builder\n-     */\n-    public function scopeByCity($query, $city)\n-    {\n-        return $query->where('city', $city);\n-    }\n-\n-    /**\n-     * Scope to filter job seekers by state.\n-     *\n-     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n-     * @param string $state\n-     * @return \\Illuminate\\Database\\Eloquent\\Builder\n-     */\n-    public function scopeByState($query, $state)\n-    {\n-        return $query->where('state', $state);\n-    }\n-\n-    /**\n-     * Scope to filter job seekers by country.\n-     *\n-     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n-     * @param string $country\n-     * @return \\Illuminate\\Database\\Eloquent\\Builder\n-     */\n-    public function scopeByCountry($query, $country)\n-    {\n-        return $query->where('country', $country);\n-    }\n+ \n }\n"
                },
                {
                    "date": 1736505398262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,6 +28,19 @@\n         'state',\n         'country',\n     ];\n \n+    public function createToken($name)\n+    {\n+        $token = Str::random(60);\n+\n+        $this->tokens()->create([\n+            'name' => $name,\n+            'token' => hash('sha256', $token),\n+            'abilities' => ['*'],\n+        ]);\n+\n+        return $token;\n+    }\n+}\n  \n }\n"
                },
                {
                    "date": 1736505407328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,7 +40,7 @@\n         ]);\n \n         return $token;\n     }\n-}\n+\n  \n }\n"
                },
                {
                    "date": 1736505496724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n namespace App\\Models;\n \n use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n use Illuminate\\Database\\Eloquent\\Model;\n+use Illuminate\\Support\\Str;\n \n class JobSeeker extends Model\n {\n     use HasFactory;\n@@ -40,7 +41,6 @@\n         ]);\n \n         return $token;\n     }\n-\n  \n }\n"
                },
                {
                    "date": 1736506149231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n \n use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n use Illuminate\\Database\\Eloquent\\Model;\n use Illuminate\\Support\\Str;\n+use App\\Traits\\HasApiTokens;\n \n class JobSeeker extends Model\n {\n     use HasFactory;\n"
                },
                {
                    "date": 1736506346560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n use Illuminate\\Database\\Eloquent\\Model;\n use Illuminate\\Support\\Str;\n use App\\Traits\\HasApiTokens;\n+use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n \n class JobSeeker extends Model\n {\n     use HasFactory;\n"
                },
                {
                    "date": 1736506375381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n \n class JobSeeker extends Model\n {\n     use HasFactory;\n+    use \n \n     /**\n      * The attributes that are mass assignable.\n      *\n"
                },
                {
                    "date": 1736506399166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n class JobSeeker extends Model\n {\n     use HasFactory;\n-    use \n+    use HasApiTokens;\n \n     /**\n      * The attributes that are mass assignable.\n      *\n@@ -32,9 +32,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function createToken($name)\n+    public function Token($name)\n     {\n         $token = Str::random(60);\n \n         $this->tokens()->create([\n"
                },
                {
                    "date": 1736506408784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function Token($name)\n+    public function tokens()\n     {\n         $token = Str::random(60);\n \n         $this->tokens()->create([\n"
                },
                {
                    "date": 1736506416551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,13 +36,9 @@\n     public function tokens()\n     {\n         $token = Str::random(60);\n \n-        $this->tokens()->create([\n-            'name' => $name,\n-            'token' => hash('sha256', $token),\n-            'abilities' => ['*'],\n-        ]);\n+        \n \n         return $token;\n     }\n  \n"
                },
                {
                    "date": 1736506422781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,9 @@\n     ];\n \n     public function tokens()\n     {\n-        $token = Str::random(60);\n \n-        \n-\n         return $token;\n     }\n  \n }\n"
                },
                {
                    "date": 1736506451858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,10 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens()\n+    public function tokens(): HasMany\n     {\n-\n-        return $token;\n+        return $this->hasMany(Token::class);\n     }\n  \n }\n"
                },
                {
                    "date": 1736506474252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n namespace App\\Models;\n \n use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n use Illuminate\\Database\\Eloquent\\Model;\n-use Illuminate\\Support\\Str;\n use App\\Traits\\HasApiTokens;\n use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n \n class JobSeeker extends Model\n"
                },
                {
                    "date": 1736506885235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n use Illuminate\\Database\\Eloquent\\Model;\n use App\\Traits\\HasApiTokens;\n use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n+use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n \n class JobSeeker extends Model\n {\n     use HasFactory;\n"
                },
                {
                    "date": 1736506894643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,15 @@\n namespace App\\Models;\n \n use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n use Illuminate\\Database\\Eloquent\\Model;\n+use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n use App\\Traits\\HasApiTokens;\n-use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n-use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n \n class JobSeeker extends Model\n {\n+    use HasApiTokens;\n     use HasFactory;\n-    use HasApiTokens;\n \n     /**\n      * The attributes that are mass assignable.\n      *\n"
                },
                {
                    "date": 1736507005495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n \n class JobSeeker extends Model\n {\n     use HasApiTokens;\n+    \n     use HasFactory;\n-\n     /**\n      * The attributes that are mass assignable.\n      *\n      * @var array\n"
                },
                {
                    "date": 1736507041407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens(): HasMany\n+    public function tokens() HasMany\n     {\n         return $this->hasMany(Token::class);\n     }\n  \n"
                },
                {
                    "date": 1736507047025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens() HasMany\n+    public function tokens()\n     {\n         return $this->hasMany(Token::class);\n     }\n  \n"
                },
                {
                    "date": 1736507056650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens()\n+    public function tokens()    \n     {\n         return $this->hasMany(Token::class);\n     }\n  \n"
                },
                {
                    "date": 1736507062117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens()    \n+    public function tokens()        \n     {\n         return $this->hasMany(Token::class);\n     }\n  \n"
                },
                {
                    "date": 1736507085035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens()        \n+    public function tokens():        \n     {\n         return $this->hasMany(Token::class);\n     }\n  \n"
                },
                {
                    "date": 1736507091721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens():        \n+    public function tokens()        \n     {\n         return $this->hasMany(Token::class);\n     }\n  \n"
                },
                {
                    "date": 1736507107324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens()        \n+    public function tokens(): Has        \n     {\n         return $this->hasMany(Token::class);\n     }\n  \n"
                },
                {
                    "date": 1736507114583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens(): Has        \n+    public function tokens(): HasMany,        \n     {\n         return $this->hasMany(Token::class);\n     }\n  \n"
                },
                {
                    "date": 1736507124224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         'state',\n         'country',\n     ];\n \n-    public function tokens(): HasMany,        \n+    public function tokens()        \n     {\n         return $this->hasMany(Token::class);\n     }\n  \n"
                }
            ],
            "date": 1736493359077,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass JobSeeker extends Model\n{\n    use HasFactory;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'role',\n        'name',\n        'email',\n        'password',\n        'phoneNumber',\n        'age',\n        'sex',\n        'status',\n        'address',\n        'city',\n        'state',\n        'country',\n    ];\n\n    /**\n     * Automatically hash the password before saving.\n     *\n     * @param string $value\n     * @return void\n     */\n    public function setPasswordAttribute($value)\n    {\n        $this->attributes['password'] = bcrypt($value);\n    }\n\n    /**\n     * Automatically hash the confirmPassword before saving.\n     *\n     * @param string $value\n     * @return void\n     */\n    public function setConfirmPasswordAttribute($value)\n    {\n        $this->attributes['confirmPassword'] = bcrypt($value);\n    }\n\n    /**\n     * Get the full address of the job seeker.\n     *\n     * @return string\n     */\n    public function getFullAddressAttribute()\n    {\n        return \"{$this->address}, {$this->city}, {$this->state}, {$this->country}\";\n    }\n\n    /**\n     * Scope to filter job seekers by email.\n     *\n     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n     * @param string $email\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */\n    public function scopeByEmail($query, $email)\n    {\n        return $query->where('email', $email);\n    }\n\n    /**\n     * Scope to filter job seekers by status.\n     *\n     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n     * @param string $status\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */\n    public function scopeByStatus($query, $status)\n    {\n        return $query->where('status', $status);\n    }\n\n    /**\n     * Scope to filter job seekers by city.\n     *\n     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n     * @param string $city\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */\n    public function scopeByCity($query, $city)\n    {\n        return $query->where('city', $city);\n    }\n\n    /**\n     * Scope to filter job seekers by state.\n     *\n     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n     * @param string $state\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */\n    public function scopeByState($query, $state)\n    {\n        return $query->where('state', $state);\n    }\n\n    /**\n     * Scope to filter job seekers by country.\n     *\n     * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n     * @param string $country\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */\n    public function scopeByCountry($query, $country)\n    {\n        return $query->where('country', $country);\n    }\n}\n"
        }
    ]
}