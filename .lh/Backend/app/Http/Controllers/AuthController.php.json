{
    "sourceFile": "Backend/app/Http/Controllers/AuthController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1736494677569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736494705618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n                 'admin' => Admin::create([\n                     'name' => $validated['name'],\n                     'email' => $validated['email'],\n                     'password' => Hash::make($validated['password']),\n-                    'phonenumber' => $validated['phoneNumber'],\n+                    'phoneNumber' => $validated['phoneNumber'],\n                     'age' => $validated['age'],\n                     'sex' => $validated['sex'],\n                     'status' => $validated['status'],\n                     'address' => $validated['address'],\n@@ -65,9 +65,9 @@\n                 'employer' => Employer::create([\n                     'name' => $validated['name'],\n                     'email' => $validated['email'],\n                     'password' => Hash::make($validated['password']),\n-                    'phone_number' => $validated['phoneNumber'],\n+                    'phoneumber' => $validated['phoneNumber'],\n                     'age' => $validated['age'],\n                     'sex' => $validated['sex'],\n                     'status' => $validated['status'],\n                     'address' => $validated['address'],\n"
                },
                {
                    "date": 1736494715325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 'employer' => Employer::create([\n                     'name' => $validated['name'],\n                     'email' => $validated['email'],\n                     'password' => Hash::make($validated['password']),\n-                    'phoneumber' => $validated['phoneNumber'],\n+                    'phoneNumber' => $validated['phoneNumber'],\n                     'age' => $validated['age'],\n                     'sex' => $validated['sex'],\n                     'status' => $validated['status'],\n                     'address' => $validated['address'],\n@@ -78,9 +78,9 @@\n                 'job_seeker' => JobSeeker::create([\n                     'name' => $validated['name'],\n                     'email' => $validated['email'],\n                     'password' => Hash::make($validated['password']),\n-                    'phone_number' => $validated['phoneNumber'],\n+                    'phoneumber' => $validated['phoneNumber'],\n                     'age' => $validated['age'],\n                     'sex' => $validated['sex'],\n                     'status' => $validated['status'],\n                     'address' => $validated['address'],\n"
                },
                {
                    "date": 1736494761728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n                 'job_seeker' => JobSeeker::create([\n                     'name' => $validated['name'],\n                     'email' => $validated['email'],\n                     'password' => Hash::make($validated['password']),\n-                    'phoneumber' => $validated['phoneNumber'],\n+                    'phoneNumber' => $validated['phoneNumber'],\n                     'age' => $validated['age'],\n                     'sex' => $validated['sex'],\n                     'status' => $validated['status'],\n                     'address' => $validated['address'],\n@@ -104,9 +104,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => ucfirst($validated['role']) . ' registered successfully.',\n                 'data' => $user,\n-                // 'token' => $token\n+                'token' => $token\n             ], 201);\n     \n         } catch (ValidationException $e) {\n             return response()->json([\n"
                },
                {
                    "date": 1736495874524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,15 +98,15 @@\n                 ], 500);\n             }\n     \n             // Create token for the new user\n-            // $token = $user->createToken('auth_token')->plainTextToken;\n+            $token = $user->createToken('auth_token')->plainTextToken;\n     \n             return response()->json([\n                 'success' => true,\n                 'message' => ucfirst($validated['role']) . ' registered successfully.',\n                 'data' => $user,\n-                'token' => $token\n+                // 'token' => $token\n             ], 201);\n     \n         } catch (ValidationException $e) {\n             return response()->json([\n"
                },
                {
                    "date": 1736502394353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n                 ], 500);\n             }\n     \n             // Create token for the new user\n-            $token = $user->createToken('auth_token')->plainTextToken;\n+            // $token = $user->createToken('auth_token')->plainTextToken;\n     \n             return response()->json([\n                 'success' => true,\n                 'message' => ucfirst($validated['role']) . ' registered successfully.',\n@@ -149,8 +149,9 @@\n                     'email' => ['The provided credentials are incorrect.'],\n                 ]);\n             }\n \n+                \n             // Verify password\n             if (!Hash::check($validated['password'], $user->password)) {\n                 Log::info('Invalid password for email: ' . $email);\n                 throw ValidationException::withMessages([\n"
                },
                {
                    "date": 1736502400211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,14 @@\n                     'email' => ['The provided credentials are incorrect.'],\n                 ]);\n             }\n \n-                \n+                  // Debug: Log the user and password hash\n+        Log::info('User  found:', ['user' => $user]);\n+        Log::info('Provided password:', ['password' => $validated['password']]);\n+        Log::info('Stored password hash:', ['hash' => $user->password]);\n+\n+        \n             // Verify password\n             if (!Hash::check($validated['password'], $user->password)) {\n                 Log::info('Invalid password for email: ' . $email);\n                 throw ValidationException::withMessages([\n"
                },
                {
                    "date": 1736503507740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,13 +150,13 @@\n                 ]);\n             }\n \n                   // Debug: Log the user and password hash\n-        Log::info('User  found:', ['user' => $user]);\n-        Log::info('Provided password:', ['password' => $validated['password']]);\n-        Log::info('Stored password hash:', ['hash' => $user->password]);\n+        // Log::info('User  found:', ['user' => $user]);\n+        // Log::info('Provided password:', ['password' => $validated['password']]);\n+        // Log::info('Stored password hash:', ['hash' => $user->password]);\n \n-        \n+\n             // Verify password\n             if (!Hash::check($validated['password'], $user->password)) {\n                 Log::info('Invalid password for email: ' . $email);\n                 throw ValidationException::withMessages([\n"
                },
                {
                    "date": 1736504655137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => 'Login successful.',\n                 'data' => $user,\n-                // 'token' => $token\n+                'token' => $token\n             ], 200);\n \n         } catch (\\Exception $e) {\n             Log::error('Login error: ' . $e->getMessage());\n"
                },
                {
                    "date": 1736504660548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => 'Login successful.',\n                 'data' => $user,\n-                'token' => $token\n+                'token' => $token,\n             ], 200);\n \n         } catch (\\Exception $e) {\n             Log::error('Login error: ' . $e->getMessage());\n"
                },
                {
                    "date": 1736504699892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => 'Login successful.',\n                 'data' => $user,\n-                'token' => $token,\n+                // 'token' => $token,\n             ], 200);\n \n         } catch (\\Exception $e) {\n             Log::error('Login error: ' . $e->getMessage());\n"
                },
                {
                    "date": 1736504723776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => 'Login successful.',\n                 'data' => $user,\n-                // 'token' => $token,\n+                'token' => $token,\n             ], 200);\n \n         } catch (\\Exception $e) {\n             Log::error('Login error: ' . $e->getMessage());\n"
                },
                {
                    "date": 1736504755563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => 'Login successful.',\n                 'data' => $user,\n-                'token' => $token,\n+                // 'token' => $token,\n             ], 200);\n \n         } catch (\\Exception $e) {\n             Log::error('Login error: ' . $e->getMessage());\n"
                },
                {
                    "date": 1736504774132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => 'Login successful.',\n                 'data' => $user,\n-                // 'token' => $token,\n+                'token' => $token,\n             ], 200);\n \n         } catch (\\Exception $e) {\n             Log::error('Login error: ' . $e->getMessage());\n"
                },
                {
                    "date": 1736504862114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n                 ]);\n             }\n \n             // Generate token\n-            // $token = $user->createToken('auth_token')->plainTextToken;\n+            $token = $user->createToken('auth_token')->plainTextToken;\n \n             return response()->json([\n                 'success' => true,\n                 'message' => 'Login successful.',\n"
                },
                {
                    "date": 1736504920841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => 'Login successful.',\n                 'data' => $user,\n-                'token' => $token,\n+                'token' => $token\n             ], 200);\n \n         } catch (\\Exception $e) {\n             Log::error('Login error: ' . $e->getMessage());\n"
                },
                {
                    "date": 1736505676962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => ucfirst($validated['role']) . ' registered successfully.',\n                 'data' => $user,\n-                // 'token' => $token\n+                'token' => $token\n             ], 201);\n     \n         } catch (ValidationException $e) {\n             return response()->json([\n"
                },
                {
                    "date": 1736505684250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n                 ], 500);\n             }\n     \n             // Create token for the new user\n-            // $token = $user->createToken('auth_token')->plainTextToken;\n+            $token = $user->createToken('auth_token')->plainTextToken;\n     \n             return response()->json([\n                 'success' => true,\n                 'message' => ucfirst($validated['role']) . ' registered successfully.',\n"
                },
                {
                    "date": 1736508199942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n                 ], 500);\n             }\n     \n             // Create token for the new user\n-            $token = $user->createToken('auth_token')->plainTextToken;\n+            // $token = $user->createToken('auth_token')->plainTextToken;\n     \n             return response()->json([\n                 'success' => true,\n                 'message' => ucfirst($validated['role']) . ' registered successfully.',\n"
                },
                {
                    "date": 1736510149712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n             return response()->json([\n                 'success' => true,\n                 'message' => ucfirst($validated['role']) . ' registered successfully.',\n                 'data' => $user,\n-                'token' => $token\n+                // 'token' => $token\n             ], 201);\n     \n         } catch (ValidationException $e) {\n             return response()->json([\n@@ -125,65 +125,57 @@\n     }\n     \n \n     public function login(Request $request)\n-    {\n-        try {\n-            // Validate request\n-            $validated = $request->validate([\n-                'email' => 'required|email',\n-                'password' => 'required|string',\n-            ]);\n+{\n+    try {\n+        // Validate request\n+        $validated = $request->validate([\n+            'email' => 'required|email',\n+            'password' => 'required|string',\n+        ]);\n \n-            Log::info('Login attempt for email: ' . $validated['email']);\n-            \n-            $email = strtolower($validated['email']);\n-            \n-            // Find user\n-            $user = Admin::where('email', $email)->first()\n-                ?? Employer::where('email', $email)->first()\n-                ?? JobSeeker::where('email', $email)->first();\n+        // Find user\n+        $user = JobSeeker::where('email', $validated['email'])->first()\n+            ?? Employer::where('email', $validated['email'])->first();\n \n-            if (!$user) {\n-                Log::info('No user found with email: ' . $email);\n-                throw ValidationException::withMessages([\n-                    'email' => ['The provided credentials are incorrect.'],\n-                ]);\n-            }\n+        if (!$user) {\n+            throw ValidationException::withMessages([\n+                'email' => ['The provided credentials are incorrect.'],\n+            ]);\n+        }\n \n-                  // Debug: Log the user and password hash\n-        // Log::info('User  found:', ['user' => $user]);\n-        // Log::info('Provided password:', ['password' => $validated['password']]);\n-        // Log::info('Stored password hash:', ['hash' => $user->password]);\n+        // Verify password\n+        if (!Hash::check($validated['password'], $user->password)) {\n+            throw ValidationException::withMessages([\n+                'password' => ['The provided credentials are incorrect.'],\n+            ]);\n+        }\n \n+        // Generate token\n+        $token = $user->createToken('auth_token');\n \n-            // Verify password\n-            if (!Hash::check($validated['password'], $user->password)) {\n-                Log::info('Invalid password for email: ' . $email);\n-                throw ValidationException::withMessages([\n-                    'password' => ['The provided credentials are incorrect.'],\n-                ]);\n-            }\n+        return response()->json([\n+            'success' => true,\n+            'message' => 'Login successful.',\n+            'data' => $user,\n+            'token' => $token->plainTextToken, // Access the plainTextToken property\n+        ], 200);\n \n-            // Generate token\n-            $token = $user->createToken('auth_token')->plainTextToken;\n-\n-            return response()->json([\n-                'success' => true,\n-                'message' => 'Login successful.',\n-                'data' => $user,\n-                'token' => $token\n-            ], 200);\n-\n-        } catch (\\Exception $e) {\n-            Log::error('Login error: ' . $e->getMessage());\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'Login failed. Please try again.',\n-                'error' => $e->getMessage()\n-            ], 500);\n-        }\n+    } catch (ValidationException $e) {\n+        return response()->json([\n+            'success' => false,\n+            'message' => 'Validation failed.',\n+            'errors' => $e->errors()\n+        ], 422);\n+    } catch (\\Exception $e) {\n+        return response()->json([\n+            'success' => false,\n+            'message' => 'Login failed. Please try again.',\n+            'error' => $e->getMessage()\n+        ], 500);\n     }\n+}\n \n \n \n     public function logout(Request $request)\n"
                },
                {
                    "date": 1736512203575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,57 +125,62 @@\n     }\n     \n \n     public function login(Request $request)\n-{\n-    try {\n-        // Validate request\n-        $validated = $request->validate([\n-            'email' => 'required|email',\n-            'password' => 'required|string',\n-        ]);\n-\n-        // Find user\n-        $user = JobSeeker::where('email', $validated['email'])->first()\n-            ?? Employer::where('email', $validated['email'])->first();\n-\n-        if (!$user) {\n-            throw ValidationException::withMessages([\n-                'email' => ['The provided credentials are incorrect.'],\n+    {\n+        echo 'Received API request...';\n+        echo 'API request headers: ';\n+        print_r($request->headers());\n+        echo 'API request body: ';\n+        print_r($request->all());\n+    \n+        try {\n+            // Validate request\n+            $validated = $request->validate([\n+                'email' => 'required|email',\n+                'password' => 'required|string',\n             ]);\n+    \n+            // Find user\n+            $user = JobSeeker::where('email', $validated['email'])->first()\n+                ?? Employer::where('email', $validated['email'])->first();\n+    \n+            if (!$user) {\n+                throw ValidationException::withMessages([\n+                    'email' => ['The provided credentials are incorrect.'],\n+                ]);\n+            }\n+    \n+            // Verify password\n+            if (!Hash::check($validated['password'], $user->password)) {\n+                throw ValidationException::withMessages([\n+                    'password' => ['The provided credentials are incorrect.'],\n+                ]);\n+            }\n+    \n+            // Generate token\n+            $token = $user->createToken('auth_token');\n+    \n+            return response()->json([\n+                'success' => true,\n+                'message' => 'Login successful.',\n+                'data' => $user,\n+                'token' => $token->plainTextToken,\n+            ], 200);\n+        } catch (ValidationException $e) {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'Validation failed.',\n+                'errors' => $e->errors()\n+            ], 422);\n+        } catch (\\Exception $e) {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'Login failed. Please try again.',\n+                'error' => $e->getMessage()\n+            ], 500);\n         }\n-\n-        // Verify password\n-        if (!Hash::check($validated['password'], $user->password)) {\n-            throw ValidationException::withMessages([\n-                'password' => ['The provided credentials are incorrect.'],\n-            ]);\n-        }\n-\n-        // Generate token\n-        $token = $user->createToken('auth_token');\n-\n-        return response()->json([\n-            'success' => true,\n-            'message' => 'Login successful.',\n-            'data' => $user,\n-            'token' => $token->plainTextToken, // Access the plainTextToken property\n-        ], 200);\n-\n-    } catch (ValidationException $e) {\n-        return response()->json([\n-            'success' => false,\n-            'message' => 'Validation failed.',\n-            'errors' => $e->errors()\n-        ], 422);\n-    } catch (\\Exception $e) {\n-        return response()->json([\n-            'success' => false,\n-            'message' => 'Login failed. Please try again.',\n-            'error' => $e->getMessage()\n-        ], 500);\n     }\n-}\n \n \n \n     public function logout(Request $request)\n"
                },
                {
                    "date": 1736512270366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,63 +124,63 @@\n         }\n     }\n     \n \n-    public function login(Request $request)\n-    {\n-        echo 'Received API request...';\n-        echo 'API request headers: ';\n-        print_r($request->headers());\n-        echo 'API request body: ';\n-        print_r($request->all());\n-    \n-        try {\n-            // Validate request\n-            $validated = $request->validate([\n-                'email' => 'required|email',\n-                'password' => 'required|string',\n+   public function login(Request $request)\n+{\n+    echo 'Received API request...';\n+    echo 'API request headers: ';\n+    print_r($request->headers());\n+    echo 'API request body: ';\n+    print_r($request->all());\n+\n+    try {\n+        // Validate request\n+        $validated = $request->validate([\n+            'email' => 'required|email',\n+            'password' => 'required|string',\n+        ]);\n+\n+        // Find user\n+        $user = JobSeeker::where('email', $validated['email'])->first()\n+            ?? Employer::where('email', $validated['email'])->first();\n+\n+        if (!$user) {\n+            throw ValidationException::withMessages([\n+                'email' => ['The provided credentials are incorrect.'],\n             ]);\n-    \n-            // Find user\n-            $user = JobSeeker::where('email', $validated['email'])->first()\n-                ?? Employer::where('email', $validated['email'])->first();\n-    \n-            if (!$user) {\n-                throw ValidationException::withMessages([\n-                    'email' => ['The provided credentials are incorrect.'],\n-                ]);\n-            }\n-    \n-            // Verify password\n-            if (!Hash::check($validated['password'], $user->password)) {\n-                throw ValidationException::withMessages([\n-                    'password' => ['The provided credentials are incorrect.'],\n-                ]);\n-            }\n-    \n-            // Generate token\n-            $token = $user->createToken('auth_token');\n-    \n-            return response()->json([\n-                'success' => true,\n-                'message' => 'Login successful.',\n-                'data' => $user,\n-                'token' => $token->plainTextToken,\n-            ], 200);\n-        } catch (ValidationException $e) {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'Validation failed.',\n-                'errors' => $e->errors()\n-            ], 422);\n-        } catch (\\Exception $e) {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'Login failed. Please try again.',\n-                'error' => $e->getMessage()\n-            ], 500);\n         }\n+\n+        // Verify password\n+        if (!Hash::check($validated['password'], $user->password)) {\n+            throw ValidationException::withMessages([\n+                'password' => ['The provided credentials are incorrect.'],\n+            ]);\n+        }\n+\n+        // Generate token\n+        $token = $user->createToken('auth_token');\n+\n+        return response()->json([\n+            'success' => true,\n+            'message' => 'Login successful.',\n+            'data' => $user,\n+            'token' => $token->plainTextToken,\n+        ], 200);\n+    } catch (ValidationException $e) {\n+        return response()->json([\n+            'success' => false,\n+            'message' => 'Validation failed.',\n+            'errors' => $e->errors()\n+        ], 422);\n+    } catch (\\Exception $e) {\n+        return response()->json([\n+            'success' => false,\n+            'message' => 'Login failed. Please try again.',\n+            'error' => $e->getMessage()\n+        ], 500);\n     }\n+}\n \n \n \n     public function logout(Request $request)\n"
                },
                {
                    "date": 1736512296784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,16 +124,10 @@\n         }\n     }\n     \n \n-   public function login(Request $request)\n+    public function login(Request $request)\n {\n-    echo 'Received API request...';\n-    echo 'API request headers: ';\n-    print_r($request->headers());\n-    echo 'API request body: ';\n-    print_r($request->all());\n-\n     try {\n         // Validate request\n         $validated = $request->validate([\n             'email' => 'required|email',\n@@ -163,10 +157,11 @@\n         return response()->json([\n             'success' => true,\n             'message' => 'Login successful.',\n             'data' => $user,\n-            'token' => $token->plainTextToken,\n+            'token' => $token->plainTextToken, // Access the plainTextToken property\n         ], 200);\n+\n     } catch (ValidationException $e) {\n         return response()->json([\n             'success' => false,\n             'message' => 'Validation failed.',\n"
                }
            ],
            "date": 1736494677569,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Admin;\nuse App\\Models\\Employer;\nuse App\\Models\\JobSeeker;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Validation\\ValidationException;\n\nclass AuthController extends Controller\n{\n    public function register(Request $request)\n    {\n        try {\n            // Merge password confirmation field to standardize it for validation\n            $request->merge(['password_confirmation' => $request->confirmPassword]);\n    \n            // Validate the request\n            $validated = $request->validate([\n                'role' => 'required|in:admin,employer,job_seeker',\n                'name' => 'required|string|max:255',\n                'email' => [\n                    'required',\n                    'email',\n                    function ($attribute, $value, $fail) {\n                        if (\n                            Admin::where('email', $value)->exists() ||\n                            Employer::where('email', $value)->exists() ||\n                            JobSeeker::where('email', $value)->exists()\n                        ) {\n                            $fail('The email is already taken.');\n                        }\n                    },\n                ],\n                'password' => 'required|string|min:8|confirmed',\n                'password_confirmation' => 'required|string|min:8',\n                'phoneNumber' => 'required|string|max:15',\n                'age' => 'required|integer|min:18|max:100',\n                'sex' => 'required|string|in:male,female',\n                'status' => 'required|string|in:single,married',\n                'address' => 'required|string|max:255',\n                'city' => 'required|string|max:255',\n                'state' => 'required|string|max:255',\n                'country' => 'required|string|max:255',\n            ]);\n    \n            // Create the user based on the validated role\n            $user = match ($validated['role']) {\n                'admin' => Admin::create([\n                    'name' => $validated['name'],\n                    'email' => $validated['email'],\n                    'password' => Hash::make($validated['password']),\n                    'phonenumber' => $validated['phoneNumber'],\n                    'age' => $validated['age'],\n                    'sex' => $validated['sex'],\n                    'status' => $validated['status'],\n                    'address' => $validated['address'],\n                    'city' => $validated['city'],\n                    'state' => $validated['state'],\n                    'country' => $validated['country'],\n                ]),\n                'employer' => Employer::create([\n                    'name' => $validated['name'],\n                    'email' => $validated['email'],\n                    'password' => Hash::make($validated['password']),\n                    'phone_number' => $validated['phoneNumber'],\n                    'age' => $validated['age'],\n                    'sex' => $validated['sex'],\n                    'status' => $validated['status'],\n                    'address' => $validated['address'],\n                    'city' => $validated['city'],\n                    'state' => $validated['state'],\n                    'country' => $validated['country'],\n                ]),\n                'job_seeker' => JobSeeker::create([\n                    'name' => $validated['name'],\n                    'email' => $validated['email'],\n                    'password' => Hash::make($validated['password']),\n                    'phone_number' => $validated['phoneNumber'],\n                    'age' => $validated['age'],\n                    'sex' => $validated['sex'],\n                    'status' => $validated['status'],\n                    'address' => $validated['address'],\n                    'city' => $validated['city'],\n                    'state' => $validated['state'],\n                    'country' => $validated['country'],\n                ]),\n                default => null,\n            };\n    \n            if (!$user) {\n                return response()->json([\n                    'success' => false,\n                    'message' => 'Failed to create user. Please try again.'\n                ], 500);\n            }\n    \n            // Create token for the new user\n            // $token = $user->createToken('auth_token')->plainTextToken;\n    \n            return response()->json([\n                'success' => true,\n                'message' => ucfirst($validated['role']) . ' registered successfully.',\n                'data' => $user,\n                // 'token' => $token\n            ], 201);\n    \n        } catch (ValidationException $e) {\n            return response()->json([\n                'success' => false,\n                'message' => 'Validation failed.',\n                'errors' => $e->errors()\n            ], 422);\n        } catch (\\Exception $e) {\n            Log::error('Registration error: ' . $e->getMessage());\n            return response()->json([\n                'success' => false,\n                'message' => 'Registration failed. Please try again.',\n                'error' => $e->getMessage()\n            ], 500);\n        }\n    }\n    \n\n    public function login(Request $request)\n    {\n        try {\n            // Validate request\n            $validated = $request->validate([\n                'email' => 'required|email',\n                'password' => 'required|string',\n            ]);\n\n            Log::info('Login attempt for email: ' . $validated['email']);\n            \n            $email = strtolower($validated['email']);\n            \n            // Find user\n            $user = Admin::where('email', $email)->first()\n                ?? Employer::where('email', $email)->first()\n                ?? JobSeeker::where('email', $email)->first();\n\n            if (!$user) {\n                Log::info('No user found with email: ' . $email);\n                throw ValidationException::withMessages([\n                    'email' => ['The provided credentials are incorrect.'],\n                ]);\n            }\n\n            // Verify password\n            if (!Hash::check($validated['password'], $user->password)) {\n                Log::info('Invalid password for email: ' . $email);\n                throw ValidationException::withMessages([\n                    'password' => ['The provided credentials are incorrect.'],\n                ]);\n            }\n\n            // Generate token\n            // $token = $user->createToken('auth_token')->plainTextToken;\n\n            return response()->json([\n                'success' => true,\n                'message' => 'Login successful.',\n                'data' => $user,\n                // 'token' => $token\n            ], 200);\n\n        } catch (\\Exception $e) {\n            Log::error('Login error: ' . $e->getMessage());\n            return response()->json([\n                'success' => false,\n                'message' => 'Login failed. Please try again.',\n                'error' => $e->getMessage()\n            ], 500);\n        }\n    }\n\n\n\n    public function logout(Request $request)\n    {\n        try {\n            // Revoke all tokens...\n            $request->user()->tokens()->delete();\n\n            return response()->json([\n                'success' => true,\n                'message' => 'Successfully logged out.'\n            ]);\n            \n        } catch (\\Exception $e) {\n            Log::error('Logout error: ' . $e->getMessage());\n            return response()->json([\n                'success' => false,\n                'message' => 'Logout failed. Please try again.',\n                'error' => $e->getMessage()\n            ], 500);\n        }\n    }\n\n    public function getUsersByRole(Request $request)\n    {\n        try {\n            $validated = $request->validate([\n                'role' => 'required|in:admin,employer,job_seeker',\n            ]);\n\n            $roleModels = [\n                'admin' => Admin::class,\n                'employer' => Employer::class,\n                'job_seeker' => JobSeeker::class,\n            ];\n\n            $model = $roleModels[$validated['role']];\n            $users = $model::all();\n\n            if ($users->isEmpty()) {\n                return response()->json([\n                    'success' => true,\n                    'message' => \"No {$validated['role']}s found\",\n                    'data' => []\n                ], 200);\n            }\n\n            return response()->json([\n                'success' => true,\n                'message' => ucfirst($validated['role']) . ' list retrieved successfully.',\n                'data' => $users,\n            ], 200);\n\n        } catch (\\Exception $e) {\n            Log::error('GetUsersByRole error: ' . $e->getMessage());\n            return response()->json([\n                'success' => false,\n                'message' => 'Failed to retrieve users. Please try again.',\n                'error' => $e->getMessage()\n            ], 500);\n        }\n    }\n}\n"
        }
    ]
}