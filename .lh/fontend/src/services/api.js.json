{
    "sourceFile": "fontend/src/services/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1736342427553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736342711120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,8 @@\n   },\r\n \r\n   // New Search Functionality\r\n   searchJobPortals(searchParams) {\r\n-    // `searchParams` should be an object, e.g., { post: 'Developer', location: 'Remote' }\r\n     return apiClient.post('/job_portals/search', searchParams);\r\n   },\r\n \r\n   sendFormData(url, data, method = 'POST') {\r\n"
                },
                {
                    "date": 1736342886014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n   },\r\n \r\n   // New Search Functionality\r\n   searchJobPortals(searchParams) {\r\n-    return apiClient.post('/job_portals/search', searchParams);\r\n+    return apiClient.('/job_portals/search', searchParams);\r\n   },\r\n \r\n   sendFormData(url, data, method = 'POST') {\r\n     const formData = data instanceof FormData ? data : new FormData();\r\n"
                },
                {
                    "date": 1736344388725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,13 +112,16 @@\n   updateJobApplication(id, data) {\r\n     return this.sendFormData(`/job_applies/${id}?_method=PUT`, data);\r\n   },\r\n \r\n-  // New Search Functionality\r\n   searchJobPortals(searchParams) {\r\n-    return apiClient.('/job_portals/search', searchParams);\r\n-  },\r\n-\r\n+    // Using params to properly send query parameters\r\n+    return apiClient.get('/job_portals/search', { \r\n+        params: {\r\n+            [searchParams.filterType]: searchParams.query\r\n+        }\r\n+    });\r\n+}\r\n   sendFormData(url, data, method = 'POST') {\r\n     const formData = data instanceof FormData ? data : new FormData();\r\n     if (!(data instanceof FormData)) {\r\n       for (const key in data) {\r\n"
                },
                {
                    "date": 1736344397140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n         params: {\r\n             [searchParams.filterType]: searchParams.query\r\n         }\r\n     });\r\n-}\r\n+\r\n   sendFormData(url, data, method = 'POST') {\r\n     const formData = data instanceof FormData ? data : new FormData();\r\n     if (!(data instanceof FormData)) {\r\n       for (const key in data) {\r\n"
                },
                {
                    "date": 1736344411216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,16 +112,16 @@\n   updateJobApplication(id, data) {\r\n     return this.sendFormData(`/job_applies/${id}?_method=PUT`, data);\r\n   },\r\n \r\n-  searchJobPortals(searchParams) {\r\n+ searchJobPortals(searchParams) {\r\n     // Using params to properly send query parameters\r\n     return apiClient.get('/job_portals/search', { \r\n         params: {\r\n             [searchParams.filterType]: searchParams.query\r\n         }\r\n     });\r\n-\r\n+}\r\n   sendFormData(url, data, method = 'POST') {\r\n     const formData = data instanceof FormData ? data : new FormData();\r\n     if (!(data instanceof FormData)) {\r\n       for (const key in data) {\r\n"
                },
                {
                    "date": 1736344543378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   headers: {\r\n     Accept: 'application/json',\r\n     'X-Requested-With': 'XMLHttpRequest',\r\n   },\r\n-  withCredentials: true, // Include cookies with requests\r\n+  withCredentials: true,\r\n });\r\n \r\n // Request interceptor\r\n apiClient.interceptors.request.use(\r\n@@ -59,8 +59,9 @@\n   }\r\n }\r\n \r\n export default {\r\n+  // Auth endpoints\r\n   register(formData) {\r\n     return apiClient.post('/register', formData, {\r\n       headers: {\r\n         'Content-Type': 'multipart/form-data',\r\n@@ -96,8 +97,9 @@\n   deleteJobPortal(id) {\r\n     return apiClient.delete(`/job_portals/${id}`);\r\n   },\r\n \r\n+  // Job Applications Endpoints\r\n   getAllJobApplications() {\r\n     return apiClient.get('/job_applies');\r\n   },\r\n \r\n@@ -112,16 +114,25 @@\n   updateJobApplication(id, data) {\r\n     return this.sendFormData(`/job_applies/${id}?_method=PUT`, data);\r\n   },\r\n \r\n- searchJobPortals(searchParams) {\r\n-    // Using params to properly send query parameters\r\n-    return apiClient.get('/job_portals/search', { \r\n-        params: {\r\n-            [searchParams.filterType]: searchParams.query\r\n-        }\r\n-    });\r\n-}\r\n+  // Updated Search Functionality\r\n+  searchJobPortals(searchParams) {\r\n+    // Convert the search parameters to query parameters\r\n+    const params = {};\r\n+    \r\n+    // If filterType is 'query', use it as a general search\r\n+    if (searchParams.filterType === 'query') {\r\n+      params.query = searchParams.query;\r\n+    } else {\r\n+      // Otherwise, use the specific filter type\r\n+      params[searchParams.filterType] = searchParams.query;\r\n+    }\r\n+\r\n+    return apiClient.get('/job_portals/search', { params });\r\n+  },\r\n+\r\n+  // Utility function for handling form data\r\n   sendFormData(url, data, method = 'POST') {\r\n     const formData = data instanceof FormData ? data : new FormData();\r\n     if (!(data instanceof FormData)) {\r\n       for (const key in data) {\r\n@@ -138,5 +149,5 @@\n         'Content-Type': 'multipart/form-data',\r\n       },\r\n     });\r\n   },\r\n-};\r\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1736342427553,
            "name": "Commit-0",
            "content": "import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:8000/api',\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'X-Requested-With': 'XMLHttpRequest',\r\n  },\r\n  withCredentials: true, // Include cookies with requests\r\n});\r\n\r\n// Request interceptor\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response) {\r\n      handleErrorResponse(error.response);\r\n    } else if (error.request) {\r\n      console.error('No response received:', error.request);\r\n    } else {\r\n      console.error('Error setting up request:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nfunction handleErrorResponse(response) {\r\n  const status = response.status;\r\n  const message = response.data.message || 'An error occurred.';\r\n\r\n  switch (status) {\r\n    case 401:\r\n      console.error('Unauthorized:', message);\r\n      break;\r\n    case 403:\r\n      console.error('Access forbidden:', message);\r\n      break;\r\n    case 422:\r\n      console.error('Validation error:', response.data.errors);\r\n      break;\r\n    case 429:\r\n      console.error('Too many requests. Please try again later.');\r\n      break;\r\n    case 500:\r\n      console.error('Server error. Please try again later.');\r\n      break;\r\n    default:\r\n      console.error('API Error:', message);\r\n  }\r\n}\r\n\r\nexport default {\r\n  register(formData) {\r\n    return apiClient.post('/register', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  login(data) {\r\n    return apiClient.post('/login', data);\r\n  },\r\n\r\n  logout() {\r\n    return apiClient.post('/logout');\r\n  },\r\n\r\n  // Job Portal Endpoints\r\n  getJobPortals(params = {}) {\r\n    return apiClient.get('/job_portals', { params });\r\n  },\r\n\r\n  getJobPortalById(id) {\r\n    return apiClient.get(`/job_portals/${id}`);\r\n  },\r\n\r\n  createJobPortal(data) {\r\n    return this.sendFormData('/job_portals', data, 'POST');\r\n  },\r\n\r\n  updateJobPortal(id, data) {\r\n    return this.sendFormData(`/job_portals/${id}?_method=PUT`, data, 'POST');\r\n  },\r\n\r\n  deleteJobPortal(id) {\r\n    return apiClient.delete(`/job_portals/${id}`);\r\n  },\r\n\r\n  getAllJobApplications() {\r\n    return apiClient.get('/job_applies');\r\n  },\r\n\r\n  getJobApplicationById(id) {\r\n    return apiClient.get(`/job_applies/${id}`);\r\n  },\r\n\r\n  createJobApplication(data) {\r\n    return this.sendFormData('/job_applies', data);\r\n  },\r\n\r\n  updateJobApplication(id, data) {\r\n    return this.sendFormData(`/job_applies/${id}?_method=PUT`, data);\r\n  },\r\n\r\n  // New Search Functionality\r\n  searchJobPortals(searchParams) {\r\n    // `searchParams` should be an object, e.g., { post: 'Developer', location: 'Remote' }\r\n    return apiClient.post('/job_portals/search', searchParams);\r\n  },\r\n\r\n  sendFormData(url, data, method = 'POST') {\r\n    const formData = data instanceof FormData ? data : new FormData();\r\n    if (!(data instanceof FormData)) {\r\n      for (const key in data) {\r\n        if (data[key] !== null) {\r\n          formData.append(key, data[key]);\r\n        }\r\n      }\r\n    }\r\n    return apiClient.request({\r\n      url,\r\n      method,\r\n      data: formData,\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n};\r\n"
        }
    ]
}